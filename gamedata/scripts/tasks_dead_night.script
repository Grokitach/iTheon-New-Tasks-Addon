
local zombie_sections = {"zombi_9", "zombi_x3", "zombi_x4", "zombi_babka_1", "zombi_babka_2", "zombi_babka_3", "zombie_ghol", "zombie_strong", "zombie_teta", "zombie_wich"}

function rand_section()
    return zombie_sections[math.random(1, #zombie_sections)]
end

local behind_big_rock = vector():set(-253.8789,2.6530,-330.5444)
local behind_small_close_rock = vector():set(-238.5527,2.5418,-283.8648) -- between controller rock and GG
local behind_far_rock = vector():set(-240.4750,0.8257,-264.7484) -- aka controller rock
local behind_far_tree = vector():set(-211.2332,5.0780,-300.9323)
local behind_close_tree = vector():set(-219.5053,4.0447,-340.5575)
local behind_bush = vector():set(-206.0665,5.1084,-332.1737)



local spawn_configs = {
    {
        vector = behind_big_rock,
        lvid = 119466,
        gvid = 1139,
        count_min = 7,
        count_max = 13,
        section_func = rand_section
    },
    {
        vector = behind_small_close_rock,
        lvid = 129790,
        gvid = 1140,
        count_min = 7,
        count_max = 13,
        section_func = rand_section
    },
    {
        vector = behind_far_tree,
        lvid = 152106,
        gvid = 1159,
        count_min = 7,
        count_max = 13,
        section_func = rand_section
    },
    {
        vector = behind_close_tree,
        lvid = 144647,
        gvid = 1137,
        count_min = 7,
        count_max = 13,
        section_func = rand_section
    },

    {
        vector = behind_bush,
        lvid = 157274,
        gvid = 1160,
        count_min = 1,
        count_max = 1,
        section_func = function() return "zombie_blind" end
    },
    {
        vector = behind_far_rock,
        lvid = 128321,
        gvid = 1140,
        count_min = 1,
        count_max = 1,
        section_func = function() return "zombie_blind" end
    },
    {
        vector = behind_far_rock,
        lvid = 128321,
        gvid = 1140,
        count_min = 1,
        count_max = 1,
        section_func = function() return "m_controller_normal" end
    },
}

xr_effects.dispatch_dead_night_details = function(actor, npc, p)
    CreateTimeEvent(0,"dispatch_dead_night_details",0, function ()
        local task_id = p[1]
        -- Build News
        local news_caption = game.translate_string(task_manager.task_ini:r_string_ex(task_id, "title")) or "error"

        local news_text = game.translate_string('dead_night_details')
        local news_ico = task_manager.task_ini:r_string_ex(task_id, "icon")

        db.actor:give_talk_message2(news_caption, news_text, news_ico, "iconed_answer_item")
        return true
    end)
end

-- Stage 0: Task has been set up - player needs to get to the Darkscape close to the coded position
-- Stage 1: Player needs to kill all of the mutants (showing tag only on one of them at a time
-- to make it harder to cheese through looking at the map)
-- Stage 2: Player can receive reward from the quest giver
local state = {}
function save_state(mdata)
	mdata.dead_night_task_data = state
end

function load_state(mdata)
	if mdata.dead_night_task_data then
		state = mdata.dead_night_task_data
	end
end

task_status_functor.dead_night_task_status_functor = function(tsk,task_id)
	if not (db.actor and tsk) then return end
	local stage = tsk.stage

	if (stage == 0) then
        if
            is_darkscape()
            and db.actor:position():distance_to(vector():set(-226.5967,4.5275,-317.1637)) < 15
            and new_tasks_addon_tasks_utils.is_dark_night()
        then
            tsk.stage = 1
            level.add_pp_effector ("fade_in.ppe", 200, false)
            spawn()
        end
    end

    if (stage == 1) then
        if not is_darkscape() then return 'fail' end

        if all_dead() then
            tsk.stage = 2
        end
    end
end

function spawn()
    for _, spawn_config in pairs(spawn_configs) do
        for i=1,math.random(spawn_config.count_min, spawn_config.count_max) do
            table.insert(state, new_tasks_addon_tasks_utils.spawn_at_position(
                spawn_config.section_func(),
                spawn_config.vector,
                spawn_config.lvid,
                spawn_config.gvid,
                false
            ))
        end
    end
end

function all_dead()
    local some_lives = false

    for _, id in pairs(state) do
        local obj = alife():object(id)

        if obj then
            if obj:alive() then
                some_lives = true
            end
        end
    end

    return not some_lives
end

function is_darkscape()
    return level.name() == "k01_darkscape"
end

task_functor.dead_night_task_target_functor = function(task_id,field,p,tsk)
	if not (db.actor and tsk) then return nil end
	local stage = tsk.stage
    if (stage == 1 and is_darkscape()) then -- Darkscape check needed to avoid crash on task fail cleanup
        local sim = alife()
        for _, id in ipairs(state) do
            local obj = sim:object(id)
            if obj and obj:alive() then return id end
        end
    end
    if (stage == 2) then
        return tsk.task_giver_id
    end
end

xr_effects.dead_night_cleanup = function()
    local sim = alife()

	for _, id in pairs(state) do
		if sim:object(id) then
			safe_release_manager.release({id = id})
		end
	end

    state = {}
end

function on_game_start()
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end